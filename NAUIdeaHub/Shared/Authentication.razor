@page "/auth"
@using System.Net.Mail;
@using System.Text.RegularExpressions;
@using System.Collections;
@inherits LayoutComponentBase


<PageTitle>Log In</PageTitle>

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudGrid>
    <MudItem xs="2"></MudItem>
    <MudItem xs="8">
        <div style="display: flex; justify-content: center; align-items: center; background-color: #FFFFFF;">
            <img src="nau.png" alt="NAU Country" />
        </div>
    </MudItem>
</MudGrid>

<div style="display: flex; justify-content: left; align-items: center; background-color: #00AEEF;"><br /><br /></div>

<br /><br />
<MudGrid>
    <MudItem xs="3"></MudItem>
    <MudItem xs="6">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-Errors="@errors">
                <MudText>Log In</MudText>
                <MudTextField T="string" Label="Username" @ref="usernameField" Required="true" RequiredError="Username Required" Validation="@(new Func<string, string>(TestEmail))" OnlyValidateIfDirty="true" />

                <MudTextField T="string" Label="Password" @ref="passwordField" InputType="InputType.Password" Validation="@(new Func<string, string>(TestPassword))" Required="true" RequiredError="Password Required" OnlyValidateIfDirty="true" />

                @if (errorMessage)
                {
                    <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Error">
                        The email or password you entered was incorrect. Please try again.
                    </MudText>
                }
                
            </MudForm>
            <MudButton Class="mt-4" Variant="Variant.Filled" Color="Color.Info" DisableElevation="true" OnClick="LogIn">Log In</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="3"></MudItem>
</MudGrid>

@code {
    bool errorMessage = false;
    string[] errors = { };
    // Will hold any error message created. Not currently displayed on the webpage

    MudTextField<string>? usernameField;
    MudTextField<string>? passwordField;
    // Can access the values from the text boxes using .Value
    //  usernameField.Value.Equals(something);

    MudForm? form;

    // Variables used with testing validation. Will be replaced with values retrieved from the database

    private string TestEmail(string uname) // Username/Email validation function
    {

        if (string.IsNullOrWhiteSpace(uname))
        {
            return "Email cannot be left blank";
        }
        else if (!ValidEmailFormat(uname))
        {
            return "Invalid email format";
            // Will display this if the value isn't correct
        }

        return null;
        // The return null can be thought of as the return true
    }

    //validates if the input into the email field is a valid email
    private bool ValidEmailFormat(string email)
    {
        try
        {
            MailAddress mailAddress = new MailAddress(email);
            return true;
        }
        catch (FormatException)
        {
            return false;
        }
    }

    private string TestPassword(string pword) // Password validation function (the same as the username/email function)
    {
        if (string.IsNullOrWhiteSpace(pword))
        {
            return "Please enter a password";
        }
        return "";
    }

    //validates the password
    //private string ValidatePassword(string password)
    //{

    //Regex numberRequirement = new Regex(@"[0-9]+");
    //Regex lowerRequirement = new Regex(@"[a-z]+");
    //Regex upperRequirement = new Regex(@"[A-Z]+");
    //Regex specialRequirement = new Regex(@"[!@#$%^&*()_+=\[{\]};:<>|./?,-]");
    //Regex lengthRequirement = new Regex(@".{8,20}");

    //checks that the password format to limit queries to the database (AD in future)
    //if (!numberRequirement.IsMatch(password) || !lowerRequirement.IsMatch(password) || !upperRequirement.IsMatch(password) || !specialRequirement.IsMatch(password) || !lengthRequirement.IsMatch(password))
    //{
    //    return "Invalid password";
    //}


    //return "";

     //}

     /*
     * This method is to check to see if the use inputted values match a user from the database
     * We will only query the database (use this method) when everything else has been checked to see if it's a valid email/password
     * This method also calls a method in the .cs version of this page.
    */
    private void LogIn()
    {
        User? queriedUser = users.FirstOrDefault(x => x.Email.Equals(usernameField.Value) && x.Password.Equals(passwordField.Value));

        if (queriedUser != null)
        {
            //clears error messages
            errorMessage = false;
            
            //method to set authenticated user for the session
            SetAuthenticatedUser(queriedUser);
        }
        else
        {
            errorMessage = true;
            // Displays the error message stating that the user inputted the wrong email/password.

            passwordField.SetText("");
            // Gets rid of what's inside the password field.
        }
    }

}
