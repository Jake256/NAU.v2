@using MudBlazor
@inject NavigationManager NavigationManager

<MudNavMenu>
    <div class="nau-clickable-blue-text">
        <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    </div>
    <div class="nau-clickable-blue-text">
        <MudNavLink Href="strategic-plan" Icon="@Icons.Material.Filled.Home">Strategic Plan</MudNavLink>
    </div>
    <div class="nau-clickable-blue-text">
        <MudNavLink Href="idealist" Icon="@Icons.Material.Filled.Home">NAU Ideas</MudNavLink>
    </div>
        <div class="nau-clickable-blue-text">
            <MudNavLink Href="ideainfo" Icon="@Icons.Material.Filled.DensitySmall">Idea Details</MudNavLink>
        </div>
        <div class="nau-clickable-blue-text">
            <MudNavLink Href="newrequest" Icon="@Icons.Material.Filled.Add">Submit a New Request</MudNavLink>
        </div>
        @if (authenticatedUser != null && authenticatedUser.IsAdmin)
        {
            <div class="nau-clickable-blue-text">
                <MudNavLink Href="reporting" Icon="@Icons.Material.Filled.Beenhere">Reporting</MudNavLink>
            </div>
        }
        <div class="nau-clickable-blue-text">
            <MudNavLink OnClick="SignOut" Icon="@Icons.Material.Filled.Security">Sign Out</MudNavLink>
        </div>
</MudNavMenu>

@code {
    private bool authenticated = false;
    private bool admin = true;

    User? authenticatedUser;

    private async Task OnInitializedAsync()
    {
        var result = await ProtectedSessionStore.GetAsync<User>("AuthenticatedUser");
        authenticatedUser = result.Success ? result.Value : null;
    }

    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task SignOut()
    {
        await ProtectedSessionStore.DeleteAsync("AuthenticatedUser");
        authenticatedUser = null;
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

}
